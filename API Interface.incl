/* *   I M A G E R Y    B U S I M E S S     S Y S T E M S,   L L C *     code complete, systems interface, Parse JSON Responses *               Build using Python, Java or C++ * */local fn BuildURLHeaders as CFMutableDictionaryRefCFMutableDictionaryRef		requestHeadersCFDictionaryRef					authDictCFStringRef							theToken, bearerTokenErrorRef  							jsonErr = NULLrequestHeaders = fn MutableDictionaryNewMutableDictionarySetValueForKey( requestHeaders, @"application/vnd.api+json", @"accept" )MutableDictionarySetValueForKey( requestHeaders, @"application/json",         @"Content-Type" )MutableDictionarySetValueForKey( requestHeaders, host,                        @"Host" )if (isSecurityOn)if (gAuthData != NULL)authDict = fn JSONSerializationJSONObjectWithData( gAuthData, 0, @jsonErr )theToken = fn DictionaryValueForKey( authDict, @"access_token" )if (theToken != NULL)bearerToken = fn StringByAppendingString(@"Bearer ", theToken )if (isLoggingOn) then NSLog( @"Authorization: %@", bearerToken )MutableDictionarySetValueForKey( requestHeaders, bearerToken, @"Authorization" )end ifend ifend ifend fn = requestHeaderslocal fn ProcessTasks( session as URLSessionRef, tasks as CFArrayRef, userData as ptr )'~'1URLSessionDataTaskRef     task =  fn ArrayFirstObject( tasks )ProgressRef           progress =  fn URLSessionTaskProgress( task )if (isLoggingOn)NSLog( @"Expected bytes: %llu\n", fn URLSessionTaskCountOfBytesClientExpectsToSend( task ) )NSLog( @"Operation kind: %@\n",   fn ProgressFileOperationKind( progress ) )NSLog( @"URL: %@\n",              fn ProgressFileURL( progress ) )end ifend fnlocal fn URLSessionAuthHandler( session as URLSessionRef, dta as CFDataRef, response as URLResponseRef, err as ErrorRef, userData as ptr )'~'1ErrorRef  jsonErr = NULLNSInteger statusCode'dispatchmaincln statusCode = [(NSHTTPURLResponse *)response statusCode];if ( statusCode == 200 )gAuthData = dtagAuthDictionary = fn JSONSerializationJSONObjectWithData( dta, 0, @jsonErr )if ( jsonErr == NULL )if (gAuthDictionary != NULL)if (isLoggingOn) then NSLog( @"\n\nThe access_token from %@ is:\n\"%@\"", fn URLPath( userData ), fn DictionaryObjectForKey( gAuthDictionary, @"access_token" ) )end ifelseif (isLoggingOn) then NSLog( @"JSON Error : %@", fn ErrorLocalizedDescription( jsonErr ) )end ifelseif (isLoggingOn) then NSLog( @"ErrorRef : %@", fn ErrorLocalizedDescription( err ) )end if'dispatchendURLSessionFinishTasksAndInvalidate( session )end fnlocal fn URLSessionAuthAPI( path as CFStringRef )'~'1URLSessionConfigurationRef	configOperationQueueRef					queueURLSessionRef							sessionCFMutableStringRef					urlStrCFURLRef									urlMutableURLRequestRef				requestCFStringRef								jsonStrCFDataRef									jsonBodyURLSessionDataTaskRef			taskconfig = fn URLSessionConfigurationDefaultURLSessionConfigurationSetHTTPAdditionalHeaders( config, fn BuildURLHeaders )queue = fn OperationQueueInitOperationQueueSetMaxConcurrentOperationCount( queue, NSOperationQueueDefaultMaxConcurrentOperationCount )session = fn URLSessionWithDelegateQueue( config, queue )urlStr = fn MutableStringWithString( host )MutableStringAppendString(urlStr, path )url = fn URLWithString( (CFStringRef) urlStr )request = fn MutableURLRequestWithURL( url )jsonStr = @"{¬\"username\": \"admin\",¬\"password\": \"p\"¬}"jsonBody = fn StringData( jsonStr, NSUTF8StringEncoding )MutableURLRequestSetHTTPBody( (MutableURLRequestRef) request, jsonBody )MutableURLRequestSetHTTPMethod( (MutableURLRequestRef) request, @"POST" )task = fn URLSessionDataTaskWithRequestCompletionHandler( session, request, @fn URLSessionAuthHandler, NULL )URLSessionTaskResume( task )URLSessionGetAllTasksWithCompletionHandler( session, @fn ProcessTasks, NULL )URLSessionFinishTasksAndInvalidate( session )end fnvoid local fn ProjectMetadataHandler( session as URLSessionRef, dta as CFDataRef, response as URLResponseRef, err as ErrorRef, userData as ptr )'~'1CFMutableDictionaryRef		jsonObjectErrorRef								jsonErr = NULLNSInteger								statusCodecln statusCode = [(NSHTTPURLResponse *)response statusCode];if ( statusCode == 200 )if (isLoggingOn) then NSLog( @"Response data class name: %@ ", fn ObjectClassName( dta ) )jsonObject = (CFMutableDictionaryRef)fn JSONSerializationJSONObjectWithData( dta, NSJSONReadingMutableContainers + NSJSONReadingMutableLeaves, @jsonErr )if ( jsonErr == NULL )if ( jsonObject != NULL )fn InitProject ( jsonObject )elseif (isLoggingOn) then NSLog( @"jsonObject is null!" )end ifelseif (isLoggingOn) then NSLog( @"jsonObject is null" )end ifelseif (isLoggingOn) then NSLog( @"Error of type: %i - %@ occurred.", jsonErr, fn ErrorLocalizedDescription( err ) )end ifend fnlocal fn ProjectMetadataAPI( path as CFStringRef )'~'1/* * stores host in global variable and * appends path to urlStr so can easily * change host when server is moved */CFStringRef 							urlStr = fn StringByAppendingString(host, path )CFURLRef									urlURLSessionConfigurationRef 	configOperationQueueRef 					queueURLSessionRef							sessionURLSessionDataTaskRef			taskif (gAuthDictionary == NULL) then fn URLSessionAuthAPI(@"/api/authentication-User/login")url = fn URLWithString( urlStr )config = fn URLSessionConfigurationDefaultURLSessionConfigurationSetHTTPAdditionalHeaders( config, (CFDictionaryRef) fn BuildURLHeaders )queue = fn OperationQueueInitOperationQueueSetMaxConcurrentOperationCount( queue, NSOperationQueueDefaultMaxConcurrentOperationCount )session = fn URLSessionWithDelegateQueue( config, queue )task = fn URLSessionDataTaskWithURLCompletionHandler( session, url, @fn ProjectMetadataHandler, NULL )URLSessionTaskResume( task )URLSessionGetAllTasksWithCompletionHandler( session, @fn ProcessTasks, NULL )URLSessionFinishTasksAndInvalidate( session )end fn