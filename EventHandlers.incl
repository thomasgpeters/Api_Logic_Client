void local fn MyCustomCellCallback( tag as long, identifier as CFStringRef, row as NSInteger, vw as CFTypeRef, userData as ptr )'~'1CFDictionaryRef dict = fn ArrayObjectAtIndex( fn TableViewData( tag ), row )select ( fn ViewTag( vw ) )case _tableCheckboxButtonSetState( vw, fn NumberIntegerValue( fn DictionaryObjectForKey( dict, identifier ) ) )case _tablePopUpPopUpButtonSelectItemAtIndex( vw, fn NumberIntegerValue( fn DictionaryObjectForKey( dict, identifier ) ) )case _tableRatingControlSetIntegerValue( vw, fn NumberIntegerValue( fn DictionaryObjectForKey( dict, identifier ) ) )end selectend fnvoid local fn ShowdProjectCreateViewViewSetHidden( _welcomeView, YES )ViewSetHidden( _projectCreateView, NO )WindowMakeFirstResponder( _window, _projectNameEdit )' ButtonSetKeyEquivalent( _createProjectCreateBtn, @"insertLineBreak:" )end fnvoid local fn NextView ( wnd as long, tag as long )CFStringRef eventStr = fn DialogEventString' ProjectCreateView' _projectNameEdit' _baseURLEdit' _authNameEdit' _authPasswordEdit' Keyboard Event Strings' insertNewLine: 			return key' insertLineBreak:			ctrl-return key' insertTab:					tab key' insertBackTab:			shift tab keyif (isLoggingOn) then NSLog( @"%@ key for %i !", eventStr, tag )select case eventStrcase @"insertNewline:", @"insertTab:"select case tagcase _projectNameEdit		: WindowMakeFirstResponder( _window, _baseURLEdit )case _baseURLEdit				: WindowMakeFirstResponder( _window, _authNameEdit )case _authNameEdit				: WindowMakeFirstResponder( _window, _authPasswordEdit )case _authPasswordEdit		: WindowMakeFirstResponder( _window, _projectNameEdit )end selectcase @"insertBacktab:"select case tagcase _projectNameEdit		: WindowMakeFirstResponder( _window, _authPasswordEdit )case _baseURLEdit				: WindowMakeFirstResponder( _window, _projectNameEdit )case _authNameEdit				: WindowMakeFirstResponder( _window, _baseURLEdit )case _authPasswordEdit		: WindowMakeFirstResponder( _window, _authNameEdit )end selectcase @"insertLineBreak:"			: fn GrabProjectDetails : fn ProjectMetadataAPI(@"/metadata?include=attributes")end selectend fnvoid local fn SayHello'~'1textlabel _textLabel, fn StringWithFormat(@"Hello, %@",fn NSUserName)end fn// application events arrive herevoid local fn DoAppEvent( ev as long )'~'1select ( ev )case _appWillFinishLaunching// app is about to finish launching - build menu and window' gProjectDictionary = fn MutableDictionaryNew' fn URLSessionAuthAPI(@"/api/authentication-User/login")case _appShouldTerminateAfterLastWindowClosedAppEventSetBool( YES )// tell the runtime we can quitend selectend fn// menu events arrive herevoid local fn DoMenu( menuID as long, itemID as long )'~'1select ( menuID )case _mHelloselect ( itemID )case _iSayHello : fn SayHelloend selectcase _mXibsselect ( itemID )case _iCheckXibs 	: fn BuildProjectXIBscase _iOpenOneXib	: fn OpenXibFileAsXMLDocumentend selectend selectend fn// window and control events arrive herevoid local fn DoDialog( ev as long, tag as long, wnd as long )'~'1select ( ev )case _tableViewSelectionDidChange'SegmentedControlSetSegmentEnabled( _addRemoveSegment, _removeContactSegmentItem, ( fn TableViewSelectedRow( whichTag ) != -1 ))select case ( tag )case _objectTableView' identifier = fn DictionaryObjectForKey( fn ArrayObjectAtIndex( fn TableViewData( _objectTableView ), fn TableViewSelectedRow( _objectTableView )), @"ID" )fn DisplayObjectDetails ( gProjectDictionary, fn TableViewSelectedRow( _objectTableView ) )'if (isLoggingOn) then NSLog( @"Clicked Row %i ", fn TableViewSelectedRow( _objectTableView ) )'if (isLoggingOn) then NSLog( @"Clicked Table View %@ ", identifier )'resultsDictionaryRef = fn GetPersonByIDRecord( identifier )'fn PopulatePersonView( resultsDictionaryRef )'resultsDictionaryRef = fn GetAddressesByPersonIDRecord( identifier )'fn PopulateAddressesView( resultsDictionaryRef )'resultsDictionaryRef = fn GetContactsByPersonIDRecord( identifier )'fn PopulateContactsView( resultsDictionaryRef )end selectcase _controlDoCommandBySelectorselect ( wnd )case _windowfn NextView (wnd, tag )end selectcase _textFieldDidChangeselect ( tag )case _projectNameEdit	: fn ValidateRequiredValuescase _baseURLEdit 			: fn ValidateRequiredValuescase _authNameEdit		 	: fn ValidateRequiredValuescase _authPasswordEdit	: fn ValidateRequiredValuesend selectcase _btnClickselect ( tag )case _createProjectCreateBtn	: fn ProjectMetadataAPI(@"/metadata?include=attributes") : fn InitProject ( gProjectDictionary )case _pushBtn 							: fn SayHellocase _createProjectBtn				: fn ShowdProjectCreateViewend selectend selectend fn