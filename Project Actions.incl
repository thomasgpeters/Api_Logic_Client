/* * * * * */void local fn GrabProjectDetailsMutableStringSetString( projectName, fn ControlStringValue( _projectNameEdit ) )MutableStringAppendString ( projectName, @" Project" )ControlSetStringValue( _projectHeadingName, (CFStringRef) projectName )if (isLoggingOn) then NSLog( @"Created %@", projectName )ViewSetHidden( _projectCreateView, YES )ViewSetHidden( _projectDetailView, NO )end fn/* * * * * */void local fn ApplyAttributeNameAndType( array as CFArrayRef, obj as CFTypeRef, index as NSUInteger, stp as ^BOOL, userData as ptr )keyEnumerator = fn DictionaryKeyEnumerator( obj )newAttributeDict = fn MutableDictionaryNewanAttributeKey = fn EnumeratorNextObject( keyEnumerator )while ( anAttributeKey )newValue = fn DictionaryObjectForKey( obj, anAttributeKey )MutableDictionarySetValueForKey( newAttributeDict, newValue, anAttributeKey )anAttributeKey = fn EnumeratorNextObject( keyEnumerator )wendMutableArrayAddObject( userData, newAttributeDict )//*stp = YES// stop enumerationend fn/* * * * * */void local fn InitProject ( projectDict as CFMutableDictionaryRef )if ( projectDict != NULL )newResourceDict = fn MutableDictionaryNewresourceList = fn TableViewData( _objectTableView )if ( fn ArrayCount( resourceList ) > 0 ) then  MutableArrayRemoveAllObjects ( resourceList )projectResourcesDict = (CFMutableDictionaryRef) fn DictionaryObjectForKey( projectDict, @"resources" )arrayOfObjectKeys = fn DictionaryAllKeys( projectResourcesDict )for anObjectKey in arrayOfObjectKeysMutableArrayAddObject( resourceList, anObjectKey )if (isLoggingOn) then NSLog( @"Adding '%@' to Table View.", anObjectKey )theObjectDict = (CFMutableDictionaryRef)fn DictionaryObjectForKey( projectResourcesDict, anObjectKey )if ( theObjectDict != NULL )tempColumnArray = (CFMutableArrayRef)fn DictionaryObjectForKey( theObjectDict, @"attributes" )if ( tempColumnArray != NULL )columnArray = fn MutableArrayNewArrayEnumerateObjects( tempColumnArray, @fn ApplyAttributeNameAndType, columnArray )anObjectDict = fn MutableDictionaryNewMutableDictionarySetObjectForKey( anObjectDict, columnArray, @"attributes" )MutableDictionarySetValueForKey( newResourceDict, anObjectDict, anObjectKey )elseif (isLoggingOn) then NSLog( @"tempColumnArray is null!")end ifend ifnextfn GrabProjectDetailsMutableDictionarySetValueForKey( gProjectDictionary, newResourceDict, @"resources" )TableViewReloadData( _objectTableView )elseif (isLoggingOn) then NSLog( @"gProjectDictionary is null" )end ifend fnvoid local fn DisplayObjectAttributeList ( theAttributeDict as CFMutableDictionaryRef)CFStringRef 	aAttrName, aAttrTyperesourceList = fn TableViewData( _attributeTableView )if ( fn ArrayCount( resourceList ) > 0 ) then  MutableArrayRemoveAllObjects ( resourceList )tempColumnArray = (CFMutableArrayRef)fn DictionaryObjectForKey( theAttributeDict, @"attributes" )'if (isLoggingOn) then NSLog( @"attributes: %@ ", tempColumnArray )attributeEnumerator = fn ArrayObjectEnumerator( tempColumnArray )if ( objectName != NULL )anAttribute = fn EnumeratorNextObject( attributeEnumerator )' row = 0while ( anAttribute )'if (isLoggingOn) then NSLog( @"attribute: %@ ", anAttribute )'attrDict = fn MutableDictionaryNew' first columnaAttrName = (CFStringRef) fn DictionaryObjectForKey( anAttribute, @"name" )' second columnaAttrType = (CFStringRef) fn DictionaryObjectForKey( anAttribute, @"type" )' set the row ' hand-built dictionaryMutableArrayAddObject( resourceList, @{ @"Name":aAttrName, @"Data Type":aAttrType, @"Tag ID":@""} )anAttribute = fn EnumeratorNextObject( attributeEnumerator )' row++wendend ifTableViewReloadData( _attributeTableView )end fnvoid local fn DisplayObjectDetails ( theProjectDict as CFMutableDictionaryRef, rowIndex as long )'~'1if ( rowIndex != -1 )resourceList = fn TableViewData( _objectTableView )if (resourceList != NULL)objectName = (CFStringRef) fn ArrayObjectAtIndex( resourceList, rowIndex )if ( objectName != NULL )ControlSetStringValue( _objectNameLabel, objectName )if ( theProjectDict != NULL )projectResourcesDict = (CFMutableDictionaryRef) fn DictionaryObjectForKey( theProjectDict, @"resources" )if ( projectResourcesDict != NULL )anObject = (CFMutableDictionaryRef) fn DictionaryValueForKey( projectResourcesDict, objectName )if ( anObject != NULL )fn DisplayObjectAttributeList ( anObject )end ifelseif (isLoggingOn) then NSLog( @"Project Dictionary is null" )end ifelseif (isLoggingOn) then NSLog( @"gProjectDictionary: is null" )end ifelseif (isLoggingOn) then NSLog( @"object Name: is null" )end ifelseif (isLoggingOn) then NSLog( @"Table data is null" )end ifelseif (isLoggingOn) then NSLog( @"Row index is -1" )end ifend fnvoid local fn OpenXibFileAsXMLDocument'~'1XMLDocumentRef xibDocumentXMLElementRef rootElementCFArrayRef elementArray, windowElementArrayNSUInteger elementCountNSXMLNodeOptions xibOptions = NSXMLDocumentTidyXMLErrorRef xibErr' URLQueryItemRef queryxibUrl = openpanel 1, @"Open an xib file", @"xib;xml"if ( xibUrl != NULL )xibDocument = fn XMLDocumentWithContentsOfURL( xibUrl, xibOptions, xibErr )if ( xibDocument != NULL )rootElement = fn XMLDocumentRootElement( xibDocument )if ( rootElement != NULL )elementArray = fn XMLElementElementsForName( rootElement, @"objects" )elementCount = fn ArrayCount( elementArray )if (isLoggingOn) then NSLog(@"Element count: %i", elementCount )if ( elementCount == 1 )windowElementArray = fn XMLElementElementsForName( elementArray[ elementCount - 1 ], @"window" )if (isLoggingOn) then NSLog(@"Window Element: %@", windowElementArray )' query = fn URLQueryItemWithName( @"foo", @"bar" )' if (isLoggingOn) then NSLog( @"Query: %@", query )elseif (isLoggingOn) then NSLog( @"Element count: %i", elementCount )end ifelseif (isLoggingOn) then NSLog( @"Root Element is null." )end ifelseif (isLoggingOn) then NSLog( @"XML Document not opened." )end ifelseif (isLoggingOn) then NSLog( @"Open URL cancelled." )end ifend fn/*local fn GetXMLElementForView ( theObject as CFDictionaryRef ) as XMLElementRef'~'1XMLDocumentRef	xibDocumentXMLElementRef		elementCFStringRef			objectTypeCFURLRef				xibFolderURLxibFolderURL = fn URLByAppendingPathComponent( fn FileManagerHomeDirectoryForCurrentUser, @"ApiLogicClient/XIBs/" )select case objectTypecase @"VARCHAR"	: 'fn DoSomethingForVarcharcase @"INTEGER"	: 'fn DoSomethingForIntegercase @"FLOAT"		: 'fn DoSomethingForFloatcase else 			: 'fn DoSomethingElseend selectend fn = element*//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *   Generates the XIBs from objects (resources) within gProjectDictionary * *    CFDictionaryRef structure * *       resources ( CFDictionaryRef ) call DictionaryForKey to get one object (resource) by name using parameter *           | *           |__ anObject - e.g., Customer, Order, Shipper, etc… *                  | *                  |__ attributes ( CFArrayRef ) *                           | *                           |__ Index - e.g. 0,1,2,3 : calls ArrayEnumerateObjects to get each attribute within tempColumnArray *                                 | *                                 |__ name ( CFDictionaryRef ) e.g., ID, Name, CreateDate *                                 |__ type ( CFDictionaryRef ) e.g., SMALLINT, TEXT, VARCHAR(32) * *   1. resource names are loaded from Table View ( resourceList ) and using an enumeration gProjectDictionary  —>  projectResourcesDict *   2. gets resource names through enumeration using the magic of a callback @fn GenerateXIBForObject *   3. for each Resource name gets the attributes tempColumnArray  *   4. enumerates list of all the attributes for anObject again through the magic of a callback @fn MapDataTypeToCocoaView * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */void local fn MapDataTypeToCocoaView ( array as CFArrayRef, obj as CFTypeRef, index as NSUInteger, stp as ^BOOL, objectInProject as ptr )'~'1if (isLoggingOn) then NSLog( @"attribute(%i) : \n%@", index, obj )end fnvoid local fn GenerateXIBForObject ( array as CFArrayRef, obj as CFTypeRef, index as NSUInteger, stp as ^BOOL, userData as ptr )'~'1if (isLoggingOn) then NSLog( @"Key '%@' from instance in Table View.", obj )if ( gProjectDictionary != NULL )' create the Custom View' TODO: need to select 2 or 3 column layout' add an view control for each attribute based on type'projectResourcesDict = (CFMutableDictionaryRef) fn DictionaryObjectForKey( gProjectDictionary, @"resources" )anObject = (CFMutableDictionaryRef) fn DictionaryValueForKey( projectResourcesDict, obj )if ( anObject != NULL )tempColumnArray = (CFMutableArrayRef) fn DictionaryObjectForKey( anObject, @"attributes" )if (tempColumnArray != NULL) then ArrayEnumerateObjects( tempColumnArray, @fn MapDataTypeToCocoaView, anObject )end ifelseif (isLoggingOn) then NSLog( @"Project Dictionary is null" )end ifend fnvoid local fn BuildProjectXIBs'~'1' check if project folder exists' if so, then empty it.' if not, then create the project folder.' FileManagerURLForDirectoryapiLogicWorkFolderURL = fn URLByAppendingPathComponent( fn FileManagerHomeDirectoryForCurrentUser, @"ApiLogicClient/" )if ( fn URLCheckResourceIsReachable( apiLogicWorkFolderURL, urlError ) && fn FileManagerIsDirectoryAtURL( apiLogicWorkFolderURL ) )if (isLoggingOn) then NSLog( @"Api Logic Client Working folder exists." )elseif (	fn FileManagerCreateDirectoryAtURL( apiLogicWorkFolderURL, NO, NULL ) ) then if (isLoggingOn) then NSLog( @"Api Logic Client Working folder is created." )end ifif ( projectName != NULL)projectFolderURL = fn URLByAppendingPathComponent( apiLogicWorkFolderURL, projectName )if ( fn URLCheckResourceIsReachable( projectFolderURL, urlError ) && fn FileManagerIsDirectoryAtURL( projectFolderURL ) )if (isLoggingOn) then NSLog( @"Project folder exists." )elseif (	fn FileManagerCreateDirectoryAtURL( projectFolderURL, YES, NULL ) )if (isLoggingOn) then NSLog( @"Created project %@ folder.", projectName )end ifend ifend iftemplateFolderURL = fn URLByAppendingPathComponent( apiLogicWorkFolderURL, @"XIBs/" )if ( fn URLCheckResourceIsReachable( templateFolderURL, urlError ) && fn FileManagerIsDirectoryAtURL( templateFolderURL ) )if (isLoggingOn) then NSLog( @"Template folder exists." )elseif (	fn FileManagerCreateDirectoryAtURL( templateFolderURL, YES, NULL ) )if (isLoggingOn) then NSLog( @"Created template folder." )end ifend ifresourceList = fn TableViewData( _objectTableView )if (resourceList != NULL) then ArrayEnumerateObjects( resourceList, @fn GenerateXIBForObject, NULL )end fn